name: 'Prepare multi-platform Docker images'
run-name: '${{ github.ref_type }}_${{ github.ref_name }}@${{ github.triggering_actor }}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  schedule:
    - cron: "45 22 * * *"
  workflow_dispatch:
    inputs:
      ANSIBLE_CLI_VERSION:
        description: 'ANSIBLE_CLI_VERSION (2.19.0b7)'
        required: false
        type: string
      HELM_CLI_VERSION:
        description: 'HELM_CLI_VERSION (v3.18.4)'
        required: false
        type: string
      K9S_CLI_VERSION:
        description: 'K9S_CLI_VERSION (v0.50.9)'
        required: false
        type: string
      KOPS_CLI_VERSION:
        description: 'KOPS_CLI_VERSION (v1.32.1)'
        required: false
        type: string
      KUBECTL_CLI_VERSION:
        description: 'KUBECTL_CLI_VERSION (v1.33.3)'
        required: false
        type: string
      TERRAFORM_CLI_VERSION:
        description: 'TERRAFORM_CLI_VERSION (1.12.2)'
        required: false
        type: string
      TERRAGRUNT_CLI_VERSION:
        description: 'TERRAGRUNT_CLI_VERSION (v0.83.2)'
        required: false
        type: string
      GCLOUD_CLI_VERSION:
        description: 'GCLOUD_CLI_VERSION (530.0.0)'
        required: false
        type: string
      CONTAINER_TAG:
        description: 'CONTAINER_TAG (initial)'
        required: false
        type: string
      SKIP_VERSION_CHANGE:
        description: 'SKIP_VERSION_CHANGE (false)'
        required: false
        type: boolean
        default: false

env:
  GH_REGISTRY: ghcr.io
  DH_REGISTRY: docker.io
  TEST_TAG: test

jobs:
  docker-build-test-tag-push:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ubuntu-latest]
    permissions:
      contents: write
      packages: write
    steps:
      - name: 'Checkout'
        uses: actions/checkout@main
      - name: 'Set requested tools versions to GITHUB_ENV'
        shell: bash
        run: |
          ./setvariables.sh
          echo "CONTAINER_TAG=initial" >> ${GITHUB_ENV}
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.ANSIBLE_CLI_VERSION }}" != "" ]]; then
              sed -i "s/ANSIBLE_CLI_VERSION=.*/ANSIBLE_CLI_VERSION=${{ github.event.inputs.ANSIBLE_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.HELM_CLI_VERSION }}" != "" ]]; then
              sed -i "s/HELM_CLI_VERSION=.*/HELM_CLI_VERSION=${{ github.event.inputs.HELM_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.K9S_CLI_VERSION }}" != "" ]]; then
              sed -i "s/K9S_CLI_VERSION=.*/K9S_CLI_VERSION=${{ github.event.inputs.K9S_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.KOPS_CLI_VERSION }}" != "" ]]; then
              sed -i "s/KOPS_CLI_VERSION=.*/KOPS_CLI_VERSION=${{ github.event.inputs.KOPS_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.KUBECTL_CLI_VERSION }}" != "" ]]; then
              sed -i "s/KUBECTL_CLI_VERSION=.*/KUBECTL_CLI_VERSION=${{ github.event.inputs.KUBECTL_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.TERRAFORM_CLI_VERSION }}" != "" ]]; then
              sed -i "s/TERRAFORM_CLI_VERSION=.*/TERRAFORM_CLI_VERSION=${{ github.event.inputs.TERRAFORM_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.TERRAGRUNT_CLI_VERSION }}" != "" ]]; then
              sed -i "s/TERRAGRUNT_CLI_VERSION=.*/TERRAGRUNT_CLI_VERSION=${{ github.event.inputs.TERRAGRUNT_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.GCLOUD_CLI_VERSION }}" != "" ]]; then
              sed -i "s/GCLOUD_CLI_VERSION=.*/GCLOUD_CLI_VERSION=${{ github.event.inputs.GCLOUD_CLI_VERSION }}/g" /tmp/github_env_tail
            fi
            if [[ "${{ github.event.inputs.CONTAINER_TAG }}" != "" ]]; then
              sed -i "s/CONTAINER_TAG=.*/CONTAINER_TAG=${{ github.event.inputs.CONTAINER_TAG }}/g" >> ${GITHUB_ENV}
            fi
          fi
          ./setvariables.sh
          cat /tmp/github_env_tail >> ${GITHUB_ENV}
          echo "WORKSPACE_ROOT_DIR=/home/user" >> ${GITHUB_ENV}
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}" >> ${GITHUB_ENV}
          echo "/tmp/github_env_tail:"
          cat /tmp/github_env_tail
          echo "GITHUB_ENV:"
          cat ${GITHUB_ENV}
      - name: 'Set up QEMU (arm64)'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/setup-qemu-action@master
        with:
          platforms: linux/arm64
      - name: 'Set up Docker buildx'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/setup-buildx-action@master
        with:
          version: latest
          driver-opts: |
            network=host
            image=moby/buildkit:master
      - name: 'Login to GitHub Container Registry'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/login-action@master
        with:
          registry: ${{ env.GH_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}
          ecr: false
          logout: true
      - name: 'Login to DockerHub Container Registry'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/login-action@master
        with:
          registry: ${{ env.DH_REGISTRY }}
          username: ${{ secrets.DH_USER }}
          password: ${{ secrets.DH_TOKEN }}
          ecr: false
          logout: true
      - name: 'Clean old containers'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: actions/delete-package-versions@main
        with:
          owner: ${{ github.repository_owner }}
          package-name: ${{ env.REPOSITORY_NAME }}
          package-type: 'container'
          token: ${{ secrets.GH_TOKEN }}
          min-versions-to-keep: 3
      - name: 'Build multi-platforms Docker images'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            ANSIBLE_CLI_VERSION=${{ env.ANSIBLE_CLI_VERSION }}
            HELM_CLI_VERSION=${{ env.HELM_CLI_VERSION }}
            K9S_CLI_VERSION=${{ env.K9S_CLI_VERSION }}
            KOPS_CLI_VERSION=${{ env.KOPS_CLI_VERSION }}
            KUBECTL_CLI_VERSION=${{ env.KUBECTL_CLI_VERSION }}
            TERRAFORM_CLI_VERSION=${{ env.TERRAFORM_CLI_VERSION }}
            TERRAGRUNT_CLI_VERSION=${{ env.TERRAGRUNT_CLI_VERSION }}
            GCLOUD_CLI_VERSION=${{ env.GCLOUD_CLI_VERSION }}
            WORKSPACE_ROOT_DIR=${{ env.WORKSPACE_ROOT_DIR }}
          load: false
          provenance: false
          no-cache: false
          platforms: linux/amd64,linux/arm64
      - name: 'Load Docker image'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            ANSIBLE_CLI_VERSION=${{ env.ANSIBLE_CLI_VERSION }}
            HELM_CLI_VERSION=${{ env.HELM_CLI_VERSION }}
            K9S_CLI_VERSION=${{ env.K9S_CLI_VERSION }}
            KOPS_CLI_VERSION=${{ env.KOPS_CLI_VERSION }}
            KUBECTL_CLI_VERSION=${{ env.KUBECTL_CLI_VERSION }}
            TERRAFORM_CLI_VERSION=${{ env.TERRAFORM_CLI_VERSION }}
            TERRAGRUNT_CLI_VERSION=${{ env.TERRAGRUNT_CLI_VERSION }}
            GCLOUD_CLI_VERSION=${{ env.GCLOUD_CLI_VERSION }}
            WORKSPACE_ROOT_DIR=${{ env.WORKSPACE_ROOT_DIR }}
          load: true
          provenance: false
          no-cache: false
          tags: ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }}
      - name: 'Test Docker image'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        shell: bash
        run: |
          echo -ne "ANSIBLE_CLI_VERSION="
          docker container run --entrypoint="/bin/sh" --rm ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }} -c "ansible --version" | awk -F"core " '/core/{print "v"$2}' | sed 's/]//'
          echo -ne "HELM_CLI_VERSION="
          docker container run --entrypoint="/bin/sh" --rm ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }} -c "helm version --short" | awk -F'+' '{print $1}'
          echo -ne "K9S_CLI_VERSION="
          docker container run --entrypoint="/bin/sh" --rm ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }} -c "k9s version" | awk '/Version:/ {print $2}'
          echo -ne "KOPS_CLI_VERSION="
          docker container run --entrypoint="/bin/sh" --rm ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }} -c "kops version" | awk -F'git-' 'NR==1 {print $2}' | sed 's/)//'
          echo -ne "KUBECTL_CLI_VERSION="
          docker container run --entrypoint="/bin/sh" --rm ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }} -c "kubectl version --client" | awk -F': ' 'NR==1 {print $2}'
          echo -ne "TERRAFORM_CLI_VERSION="
          docker container run --entrypoint="/bin/sh" --rm ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }} -c "terraform version" | awk -F'v' 'NR==1 {print $2}'
          echo -ne "TERRAGRUNT_CLI_VERSION="
          docker container run --entrypoint="/bin/sh" --rm ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }} -c "terragrunt --version" | awk 'NR==1 {print $NF}'
          echo -ne "GCLOUD_CLI_VERSION="
          docker container run --entrypoint="/bin/sh" --rm ${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.TEST_TAG }} -c "gcloud version" | awk '/Google Cloud SDK/{print $NF}'
      - name: 'Tag and push multi-platforms Docker images to preconfigured container registries'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' || github.event.inputs.SKIP_VERSION_CHANGE == 'true' }}
        uses: docker/build-push-action@master
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            ANSIBLE_CLI_VERSION=${{ env.ANSIBLE_CLI_VERSION }}
            HELM_CLI_VERSION=${{ env.HELM_CLI_VERSION }}
            K9S_CLI_VERSION=${{ env.K9S_CLI_VERSION }}
            KOPS_CLI_VERSION=${{ env.KOPS_CLI_VERSION }}
            KUBECTL_CLI_VERSION=${{ env.KUBECTL_CLI_VERSION }}
            TERRAFORM_CLI_VERSION=${{ env.TERRAFORM_CLI_VERSION }}
            TERRAGRUNT_CLI_VERSION=${{ env.TERRAGRUNT_CLI_VERSION }}
            GCLOUD_CLI_VERSION=${{ env.GCLOUD_CLI_VERSION }}
            WORKSPACE_ROOT_DIR=${{ env.WORKSPACE_ROOT_DIR }}
          push: true
          provenance: false
          no-cache: false
          github-token: ${{ secrets.GH_TOKEN }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GH_TOKEN }}
          tags: |
            ${{ secrets.DH_USER }}/${{ env.REPOSITORY_NAME }}:${{ env.CONTAINER_TAG }}
            ${{ env.GH_REGISTRY }}/${{ github.repository_owner }}/${{ env.REPOSITORY_NAME }}:${{ env.CONTAINER_TAG }}
          platforms: linux/amd64,linux/arm64
      - name: 'Pull git'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' }}
        run: |
          git pull --rebase
      - name: 'Push git changes'
        if: ${{ env.CLI_VERSIONS_CHANGED == '1' }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GH_TOKEN }}
